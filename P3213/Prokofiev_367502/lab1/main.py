def exitstr():
    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")


def trytoint(x):
    a = 0
    try:
        a = int(x)
    except Exception:
        a = None
    return a


def trytofloat(x):
    a = 0
    try:
        a = float(x)
    except Exception:
        a = None
    return a


def output_k(X, N, delta, k):
    global roundconst
    print(f"–ü–æ—Å–ª–µ k = {k}:")
    output(X, N)
    print(f"delta =", round(delta, roundconst))
    print()


def output(X, N, rounds = False):
    global roundconst
    if isinstance(X, str):
        print(X)
    else:
        for i in range(N):
            x = X[i]
            if rounds:
                x = round(x, roundconst) #–¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–∫—Ä—É–≥–ª—è–µ–º
            print(f"X[{i+1}] = {x}")


def max_to_diagonal(A, B, N):
    for i in range(N):
        max_val = max(A[i], key=abs)  # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ –º–æ–¥—É–ª—é
        max_index = A[i].index(max_val)  # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if max_index != i:  # –ï—Å–ª–∏ –º–∞–∫—Å–∏–º—É–º –Ω–µ –Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏, —Ç–æ –º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –º–µ—Å—Ç–∞–º–∏
            A[i], A[max_index] = A[max_index], A[i]
            B[i], B[max_index] = B[max_index], B[i]

    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    strog = False
    for i in range(N):
        Sum = 0
        for j in range(N):
            if (i != j):
                Sum += A[i][j]
        if A[i][i] < Sum:
            return False
        elif A[i][i] > Sum:
            strog = True # –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ö–æ—Ç—è –±—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ
    return strog


def gauss_zeidel(N, A, B, eps, M, k = 0, X = []):
    global roundconst
    delta = 0
    if (X == []): # 0 –∏—Ç–µ—Ä–∞—Ü–∏—è
        X = [0]*N
        diagonalize = max_to_diagonal(A, B, N)
        if not diagonalize:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∏–∞–≥–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
        #–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        for i in range(N):
            X[i] = B[i]/A[i][i]
        output_k(X, N, delta, k)
        k = 1
    
    for i in range(N):
        s = 0
        for j in range(i): # –¥–æ i-1
            s += A[i][j]*X[j]
        for j in range(i+1,N):# c i+1 –¥–æ –∫–æ–Ω—Ü–∞
            s += A[i][j]*X[j]
        x = (B[i] - s)/ A[i][i]
        d = abs(x - X[i])
        if d > delta:
            delta = d
        X[i] = x

    output_k(X, N, delta, k)

    if delta < eps:
        return X
    else:
        if (k < M):
            return gauss_zeidel(N, A, B, eps, M, k + 1, X)
        else:
            return "–ò—Ç–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è"


def run():
    global roundconst
    print("""
    N ‚Äí –ø–æ—Ä—è–¥–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã
    ùúÄ ‚Äí –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    Aùëñùëó ,Bùëñ ‚Äí –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –ø—Ä–∞–≤—ã–µ —á–∞—Å—Ç–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
    Xùëñ ‚Äí –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
    –ú ‚Äí –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
    k ‚Äí –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏;
    i ‚Äí –Ω–æ–º–µ—Ä —É—Ä–∞–≤–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ü–∏–∫–ª–µ;
    j ‚Äí –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∏–¥–∞ AùëñùëóXùëó (ùëò) –∏–ª–∏ AùëñùëóXùëó (ùëò‚àí1) –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è.

    –ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è –ª–∏–±–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è:
    ùê¶ùêöùê± |Xùëñ(ùëò) ‚àí Xùëñ (ùëò‚àí1)| < ùú∫,
    ùüè‚â§ùíä‚â§ùíè

    –ª–∏–±–æ –ø—Ä–∏ K = M, —Ç.–µ. –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å—Ö–æ–¥—è—Ç—Å—è

    """)

    roundconst = 3 #trytoint(input("–¢–æ—á–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π) = "))
    eps = trytofloat(input("Eps="))
    while eps is None:
        exitstr()
        eps = trytofloat(input("Eps="))
    M = trytoint(input("M="))
    while M is None:
        exitstr()
        M = trytoint(input("M="))
    N = trytoint(input("N="))
    while N is None:
        exitstr()
        N = trytoint(input("N="))

    A = []
    for i in range(N):
        A.append([])
        for j in range(N):
            A[i].append(j)
            A[i][j] = trytofloat(input(f"A[{i+1}][{j+1}] = "))
            while A[i][j] is None:
                exitstr()
                A[i][j] = trytofloat(input(f"A[{i+1}][{j+1}] = "))

    B = []
    for i in range(N):
        B.append(trytofloat(input(f"B[{i+1}] = ")))
        while B[i] is None:
            exitstr()
            B[i] = trytofloat(input(f"B[{i+1}] = "))
    print()
    print()
    X = gauss_zeidel(N, A, B, eps, M)
    print()
    print()
    output(X, N, True)


if __name__ == "__main__":
    run()
